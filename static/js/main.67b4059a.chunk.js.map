{"version":3,"sources":["images/todo1.svg","images/todo.svg","component/Todoapp.jsx","App.js","reportWebVitals.js","index.js"],"names":["Todoapp","useState","inputData","setInputData","task","setTask","toggleSubmit","setToggleSubmit","isEditItem","setIsEditItem","addTask","map","currentElem","id","name","allInputData","Date","getTime","toString","alert","className","src","todo","alt","todo1","type","placeholder","value","onChange","event","target","title","onClick","currentElement","index","newEdittask","find","editTask","updatedTasks","filter","currElm","deleteTask","data-sm-link-text","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAAe,MAA0B,kCCA1B,MAA0B,iC,OC4H1BA,EAxHC,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACXC,EADW,KACAC,EADA,OAEKF,mBAAS,IAFd,mBAEZG,EAFY,KAENC,EAFM,OAGqBJ,oBAAS,GAH9B,mBAGZK,EAHY,KAGEC,EAHF,OAIiBN,mBAAS,MAJ1B,mBAIZO,EAJY,KAIAC,EAJA,KAOZC,EAAU,WACZ,GAAIR,EAEE,GAAGA,IAAcI,EACnBD,EACID,EAAKO,KAAI,SAACC,GACN,OAAGA,EAAYC,KAAOL,EACX,2BACAI,GADP,IAEIE,KAAMZ,IAGPU,MAGXL,GAAgB,GAChBJ,EAAa,IACbM,EAAc,UAElB,CACA,IAAMM,EAAe,CACjBF,IAAI,IAAIG,MAAOC,UAAUC,WACzBJ,KAAMZ,GAEVG,EAAQ,GAAD,mBAAKD,GAAL,CAAUW,KACjBZ,EAAa,SAvBbgB,MAAM,wCAmDd,OACI,mCACI,qBAAKC,UAAU,WAAf,SACI,sBAAKA,UAAU,YAAf,UACI,mCACI,qBAAKC,IAAKC,EAAMC,IAAI,KAAK,qBAAKF,IAAKG,EAAOD,IAAI,KAC9C,4EAEJ,sBAAKH,UAAU,WAAf,UACI,uBACAK,KAAK,OACLC,YAAY,iCACZC,MAAOzB,EACP0B,SAAU,SAACC,GAAD,OAAY1B,EAAa0B,EAAMC,OAAOH,UAE5CrB,EAAe,mBAAGc,UAAU,qBAAqBW,MAAM,YAAYC,QAAStB,IAC5E,mBAAGU,UAAU,sBAAsBW,MAAM,YAAYC,QAAStB,OAItE,qBAAKU,UAAU,YAAf,SAGQhB,EAAKO,KAAI,SAACsB,GACN,OACI,mCACI,sBAAKb,UAAU,WAAf,UACI,6BAAKa,EAAenB,OACpB,sBAAKM,UAAU,WAAf,UAEI,mBAAGA,UAAU,sBACbW,MAAM,aACNC,QAAS,kBAvDpC,SAACE,GACd,IAAIC,EAAc/B,EAAKgC,MAAK,SAACxB,GACzB,OAAOA,EAAYC,KAAOqB,KAE9B3B,GAAgB,GAChBJ,EAAagC,EAAYrB,MACzBL,EAAcyB,GAiDyCG,CAASJ,EAAepB,OAEvC,mBAAGO,UAAU,2BACbW,MAAM,eACNC,QAAS,kBAjDlC,SAACE,GAChB,IAAMI,EAAelC,EAAKmC,QAAO,SAACC,GAC9B,OAAOA,EAAQ3B,KAAOqB,KAE1B7B,EAAQiC,GA6C+CG,CAAWR,EAAepB,YAVlBoB,EAAepB,WAsBlE,qBAAKO,UAAU,YAAf,SACI,wBACAA,UAAU,eACVsB,oBAAkB,aAClBV,QAxDF,WACd,OAAO3B,EAAQ,KAoDC,SAGoB,0DC3G7BsC,MANf,WACE,OACE,cAAC,EAAD,KCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.67b4059a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/todo1.e39a3081.svg\";","export default __webpack_public_path__ + \"static/media/todo.a90b1a5b.svg\";","import React, {useState} from 'react';\nimport todo1 from \"../images/todo1.svg\";\nimport todo from \"../images/todo.svg\";\n\nconst Todoapp = () => {\n    const [inputData, setInputData] = useState(\"\");\n    const[task, setTask] = useState([]);\n    const[toggleSubmit, setToggleSubmit] = useState(true);\n    const[isEditItem, setIsEditItem] = useState(null);\n\n/************** Add Task ***************/\n    const addTask = () => {\n        if(!inputData) {\n            alert(\"Empty feild can not be a task. LOL!\")\n        }else if(inputData && !toggleSubmit){\n            setTask(\n                task.map((currentElem) => {\n                    if(currentElem.id === isEditItem) {\n                        return {\n                            ...currentElem,\n                            name: inputData\n                        }\n                    }\n                    return currentElem;\n                })\n            )\n                setToggleSubmit(true);\n                setInputData('');\n                setIsEditItem(null);\n        }\n        else{\n            const allInputData = {\n                id: new Date().getTime().toString(), // to get unique ID \n                name: inputData\n            }\n            setTask([...task,allInputData]); // to save previous data's state we used spread operator i.e. ...\n            setInputData('');\n        }\n    }\n\n/************** Edit Task ***************/\n    const editTask = (index) => {\n        let newEdittask = task.find((currentElem) => {\n            return currentElem.id === index\n        })\n        setToggleSubmit(false);\n        setInputData(newEdittask.name);\n        setIsEditItem(index);\n    }\n\n/************** Delete Task ***************/\n    const deleteTask = (index) => {\n        const updatedTasks = task.filter((currElm) => {\n            return currElm.id !== index;\n        })\n        setTask(updatedTasks);\n    }\n\n\n/************** Delete / Remove All ***************/\n    const removeAll = () => {\n        return setTask([]);\n    }\n/************** End of Functions ***************/    \n    return(\n        <>\n            <div className=\"main-div\">\n                <div className=\"child-div\">\n                    <figure>\n                        <img src={todo} alt=\"\" /><img src={todo1} alt=\"\" />\n                        <figcaption>Add your List Here 📓</figcaption>\n                    </figure>\n                    <div className=\"addItems\">\n                        <input\n                        type=\"text\"\n                        placeholder=\" ✍️ Write Tasks Here\"\n                        value={inputData}\n                        onChange={(event) =>  setInputData(event.target.value) } />\n                        {\n                            toggleSubmit ? <i className=\"fa fa-plus add-btn\" title=\"Add Tasks\" onClick={addTask}></i> : \n                            <i className=\"far fa-edit add-btn\" title=\"Edit Task\" onClick={addTask}></i> \n                        }\n                        \n                    </div>\n                    <div className=\"showItems\">\n\n                        {\n                            task.map((currentElement) => {\n                                return(\n                                    <>\n                                        <div className=\"eachItem\" key={currentElement.id}>\n                                            <h3>{currentElement.name}</h3>\n                                            <div className=\"todo-btn\">\n\n                                                <i className=\"far fa-edit add-btn\"\n                                                title=\"Edit Tasks\"\n                                                onClick={() => editTask(currentElement.id)}></i>\n                                            \n                                                <i className=\"far fa-trash-alt add-btn\"\n                                                title=\"Delete Tasks\"\n                                                onClick={() => deleteTask(currentElement.id)}></i>\n                                        </div>\n                                        </div>\n                                    </>\n                                )\n                            })\n                        }\n\n                        \n                    </div>\n\n                    {/* {Clear all Tasks} */}\n                    <div className=\"showItems\">\n                        <button\n                        className=\"btn effect04\"\n                        data-sm-link-text=\"REMOVE ALL\"\n                        onClick={removeAll}><span>CHECK LIST</span></button>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Todoapp;","import './App.css';\nimport Todoapp from \"../src/component/Todoapp\";\n\nfunction App() {\n  return (\n    <Todoapp />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}